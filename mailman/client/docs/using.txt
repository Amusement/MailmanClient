===================
Mailman REST client
===================

This is the official Python bindings for the GNU Mailman REST API.  In order
to talk to Mailman, the engine's REST server must be running.  You begin by
instantiating a client object to access the root of the REST hierarchy,
providing it the base URL, user name and password (for Basic Auth).

    >>> from mailman.client import Client
    >>> client = Client('http://localhost:8001/3.0', 'restadmin', 'restpass')

We can retrieve basic information about the server.

    >>> dump(client.system)
    http_etag: "..."
    mailman_version: GNU Mailman 3.0... (...)
    python_version: ...
    self_link: http://localhost:8001/3.0/system

To start with, there are no known mailing lists.

    >>> client.lists
    []


Domains
=======

Before new mailing lists can be added, the domain that the list will live in
must be added.  By default, there are no known domains.

    >>> client.domains
    []

It's easy to create a new domain; when you do, a proxy object for that domain
is returned.

    >>> example_dot_com = client.create_domain('example.com')
    >>> example_dot_com
    <Domain "example.com">
    >>> print example_dot_com.base_url
    http://example.com
    >>> print example_dot_com.contact_address
    postmaster@example.com
    >>> print example_dot_com.description
    None
    >>> print example_dot_com.email_host
    example.com
    >>> print example_dot_com.url_host
    example.com

You can also get an existing domain independently.

    >>> example = client.get_domain('example.com')
    >>> example
    <Domain "example.com">
    >>> print example_dot_com.base_url
    http://example.com

But you cannot retrieve a non-existent domain.

    >>> client.get_domain('example.org')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: 404 Not Found
